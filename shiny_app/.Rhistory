shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align = "center")
library(shiny)
library(leaflet)
library(sf)
shinyAppDir("shiny_app", options = list(width = "100%", height = 500))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mtcars
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(sf)
library(patchwork)
library(dplyr)
library(RColorBrewer)
library(raster)
library(ggplot2)
library(sf)
library(patchwork)
library(dplyr)
library(RColorBrewer)
library(raster)
# Swiss plateau as basis
bio_geo_regions <- read_sf("raw_data/biogeographical_regions/N2020_Revision_BiogeoRegion.shp")
plateau <- bio_geo_regions %>%
group_by(DERegionNa) %>%
summarize(geometry=st_union(geometry)) %>%
rename(name = DERegionNa) %>%
filter(name == "Mittelland")
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(tidyverse)
library(sf)
library(leaflet)
library(data.table)
library(patchwork)
library(lubridate)
library(mapview)
library(rmapshaper)
options(dplyr.summarise.inform = FALSE)
# Swiss plateau as basis
bio_geo_regions <- read_sf("raw_data/biogeographical_regions/N2020_Revision_BiogeoRegion.shp")
plateau <- bio_geo_regions %>%
group_by(DERegionNa) %>%
summarize(geometry=st_union(geometry)) %>%
rename(name = DERegionNa) %>%
filter(name == "Mittelland")
# Simplifying plateau geometry and saving as shp
#plateau_simp <- ms_simplify(plateau, keep_shapes=T, keep=0.005)
#st_write(plateau_simp, "processed_data/plateau/plateau.shp")
# resolution of the hexagonal raster in m
resolution <- 2000
# Creating hexagonal fishnet based on geometry of plateau
target_fishnet <- st_sf(st_make_grid(plateau, cellsize=resolution, square=F)) %>%
rename(geometry = st_make_grid.plateau..cellsize...resolution..square...F.)
target_fishnet <- target_fishnet[plateau,,]
# Adding row number for later join
target_fishnet <- mutate(target_fishnet, id = row_number())
# Generating points at centroid coordinates
target_fishnet_points <- target_fishnet %>%
mutate(GKODE=st_coordinates(st_centroid(.))[,1]) %>%
mutate(GKODN=st_coordinates(st_centroid(.))[,2]) %>%
st_drop_geometry() %>%
st_as_sf(., coords=c("GKODE", "GKODN"), crs=2056, agr="constant")
ggplot() +
geom_sf(data=plateau) +
geom_sf(data = target_fishnet, alpha=0.5) +
theme_void()
#st_write(target_fishnet, "processed_data/fishnet/fishnet.shp", append=F)
# creating a union of the fishnet for faster filtering purposes
target_fishnet_union <- target_fishnet %>%
summarize(geometry = st_union(geometry))
#ggplot() +
#  geom_sf(data=plateau) +
#  geom_sf(data = target_fishnet_union, alpha=0.5) +
#  theme_void()
# reading the necessary raster data
temperature_ch_july_rast <- raster("raw_data/climate/present/wald-lufttemperatur_juli_1981_2010_2056.tif")
humidity_ch_july_rast <- raster("raw_data/climate/present/wald-relative_luftfeuchte_juli_1981_2010_2056.tif")
# downsample 25 m x 25 m --> 1 km x 1km
temperature_ch_july_rast <- aggregate(temperature_ch_july_rast, fact=c(1000/25, 1000/25))
humidity_ch_july_rast <- aggregate(humidity_ch_july_rast, fact=c(1000/25, 1000/25))
par(mfrow=c(1,2))
plot(temperature_ch_july_rast)
plot(humidity_ch_july_rast)
## Temperature data
# Convert raster to points
points <- rasterToPoints(temperature_ch_july_rast)
points <- data.frame(gkode=points[,1], gkodn=points[,2], temp=points[,3])
# Create an sf object from the points
temperature_ch_july <- st_as_sf(points, coords = c("gkode", "gkodn"), crs = 2056)
# Assign raster values to sf object
temperature_ch_july$temp <- points[, "temp"]
# Remove all temperature points that are not in the Swiss plateau
temperature_ch_july <- temperature_ch_july[target_fishnet_union,,]
# assign hexagon cell to all temperature values in which they are contained
temperature_ch_july$id <- st_nearest_feature(temperature_ch_july, target_fishnet)
# compute mean temperature per hexagonal cell
setDT(temperature_ch_july)
temperature_ch_july_fishnet <- temperature_ch_july[, .(temp_july = mean(temp)), by = id]
# joining the data to the fishnet
target_fishnet <- left_join(target_fishnet, temperature_ch_july_fishnet, by="id")
## Humidity data
# Convert raster to points
points <- rasterToPoints(humidity_ch_july_rast)
points <- data.frame(gkode=points[,1], gkodn=points[,2], hum=points[,3])
# Create an sf object from the points
humidity_ch_july <- st_as_sf(points, coords = c("gkode", "gkodn"), crs = 2056)
# Assign raster values to sf object
humidity_ch_july$hum <- points[, "hum"]
# Remove all humidity points that are not in the Swiss plateau
humidity_ch_july <- humidity_ch_july[target_fishnet_union,,]
# assign hexagon cell to all humidity values in which they are contained
humidity_ch_july$id <- st_nearest_feature(humidity_ch_july, target_fishnet)
# compute mean humidity per hexagonal cell
setDT(humidity_ch_july)
humidity_ch_july_fishnet <- humidity_ch_july[, .(hum_july = mean(hum)), by = id]
# joining the data to the fishnet
target_fishnet <- left_join(target_fishnet, humidity_ch_july_fishnet, by="id")
temp <- ggplot() +
geom_sf(data = plateau) +
geom_sf(data = target_fishnet, aes(fill = temp_july), color=NA, alpha = 0.8) +
scale_fill_gradient(low = "#FFCCCB", high = "#8b0000") +
theme_void()
hum <- ggplot() +
geom_sf(data=plateau) +
geom_sf(data=target_fishnet, aes(fill = hum_july), color=NA, alpha=0.8)+
scale_fill_gradient(low = "#FFCCCB", high="#90ee90") +
theme_void()
temp + hum
# Swiss meteo stations in plateau: Basel - Binningen, Bern - Zollikofen, Geneve / Cointrin, Luzern, Neuchatel, Payerne, Zurich / Fluntern, St. Gallen
stations_plateau <- c("BAS", "BER", "GVE", "LUZ", "NEU", "PAY", "SMA", "STG")
# locations of all Swiss meteo stations
stations <- read.csv("raw_data/climate/present/meteo_stations/meteoswissstations.csv")
stations <- stations %>%
dplyr::filter(station.location %in% stations_plateau) %>%
dplyr::select(`Ã¯..Station`, station.location, CoordinatesE, CoordinatesN) %>%
st_as_sf(., coords=c("CoordinatesE", "CoordinatesN"), crs=2056, agr="constant")
stations_mean_measurements <- data.frame()
# calculating average humidity and temperature for all stations for every months between 1981 and 2010
for (i in 1:length(stations_plateau)) {
station_data <- read.csv(paste0("raw_data/climate/present/meteo_stations/nbcn-daily_",stations_plateau[i],"_previous.csv"), sep=";")
# formatting date
station_data$date <- ymd(station_data$date)
station_data$year <- year(station_data$date)
station_data$month <- month(station_data$date, label=T)
# average daily max temperature and humidity per month between 1981 and 2010
station_data_month_mean <- station_data %>%
filter(year >= 1981 & year <= 2010) %>%
group_by(month) %>%
summarize(temp = mean(as.numeric(tre200dx)), hum=mean(as.numeric(ure200d0)))
# pivoting the dataframe
station_data_month_mean_pivot <- pivot_wider(
data = station_data_month_mean,
names_from = month,
values_from = c(temp, hum)
)
# inserting station name into pivoted dataframe
station_data_month_mean_pivot$station.location <- stations_plateau[i]
stations_mean_measurements <- rbind(station_data_month_mean_pivot, stations_mean_measurements)
}
# joining the results to the stations sf object
stations <- left_join(stations, stations_mean_measurements, by="station.location")
# assigning closest station for every fishnet cell
target_fishnet$nearest_station <- stations_plateau[st_nearest_feature(target_fishnet, stations)]
# calculation of the missing month values
target_fishnet_measurements <- left_join(target_fishnet, stations %>% st_drop_geometry(), by=c("nearest_station" = "station.location")) %>%
st_drop_geometry()
ggplot() +
geom_sf(data = plateau) +
geom_sf(data = target_fishnet, aes(fill = nearest_station), color=NA, alpha = 0.8) +
theme_void()
target_fishnet_measurements <- target_fishnet_measurements %>%
mutate(temp_january = temp_july - (temp_Jul - temp_Jan)) %>%
mutate(temp_february = temp_july - (temp_Jul - temp_Feb)) %>%
mutate(temp_march = temp_july - (temp_Jul - temp_Mar)) %>%
mutate(temp_april = temp_july - (temp_Jul - temp_Apr)) %>%
mutate(temp_may = temp_july - (temp_Jul - temp_May)) %>%
mutate(temp_june = temp_july - (temp_Jul - temp_Jun)) %>%
mutate(temp_august = temp_july - (temp_Jul - temp_Aug)) %>%
mutate(temp_september = temp_july - (temp_Jul - temp_Sep)) %>%
mutate(temp_october = temp_july - (temp_Jul - temp_Oct)) %>%
mutate(temp_november = temp_july - (temp_Jul - temp_Nov)) %>%
mutate(temp_december = temp_july - (temp_Jul - temp_Dec)) %>%
mutate(hum_january = hum_july - (hum_Jul - hum_Jan)) %>%
mutate(hum_february = hum_july - (hum_Jul - hum_Feb)) %>%
mutate(hum_march = hum_july - (hum_Jul - hum_Mar)) %>%
mutate(hum_april = hum_july - (hum_Jul - hum_Apr)) %>%
mutate(hum_may = hum_july - (hum_Jul - hum_May)) %>%
mutate(hum_june = hum_july - (hum_Jul - hum_Jun)) %>%
mutate(hum_august = hum_july - (hum_Jul - hum_Aug)) %>%
mutate(hum_september = hum_july - (hum_Jul - hum_Sep)) %>%
mutate(hum_october = hum_july - (hum_Jul - hum_Oct)) %>%
mutate(hum_november = hum_july - (hum_Jul - hum_Nov)) %>%
mutate(hum_december = hum_july - (hum_Jul - hum_Dec)) %>%
# aggregating to seasons through mean
mutate(temp_winter_present = rowMeans(select(., temp_december, temp_january, temp_february))) %>%
mutate(temp_spring_present = rowMeans(select(., temp_march, temp_april, temp_may))) %>%
mutate(temp_summer_present = rowMeans(select(., temp_june, temp_july, temp_august))) %>%
mutate(temp_autumn_present = rowMeans(select(., temp_september, temp_october, temp_november))) %>%
mutate(hum_winter_present = rowMeans(select(., hum_december, hum_january, hum_february))) %>%
mutate(hum_spring_present = rowMeans(select(., hum_march, hum_april, hum_may))) %>%
mutate(hum_summer_present = rowMeans(select(., hum_june, hum_july, hum_august))) %>%
mutate(hum_autumn_present = rowMeans(select(., hum_september, hum_october, hum_november))) %>%
#temp_january, temp_february, temp_march, temp_april, temp_may, temp_june, temp_july, temp_august, temp_september, temp_october, temp_november, temp_december,
#hum_january, hum_february, hum_march, hum_april, hum_may, hum_june, hum_july, hum_august, hum_september, hum_october, hum_november, hum_december)
# calculation of saturation deficit for every month according to Randolph & Storey (1999)
#mutate(sd_january = (1 - (hum_january/100)) * 4.9463 * exp(0.0621 * temp_january)) %>%
#mutate(sd_february = (1 - (hum_february/100)) * 4.9463 * exp(0.0621 * temp_february)) %>%
#mutate(sd_march = (1 - (hum_march/100)) * 4.9463 * exp(0.0621 * temp_march)) %>%
#mutate(sd_april = (1 - (hum_april/100)) * 4.9463 * exp(0.0621 * temp_april)) %>%
#mutate(sd_may = (1 - (hum_may/100)) * 4.9463 * exp(0.0621 * temp_may)) %>%
#mutate(sd_june = (1 - (hum_june/100)) * 4.9463 * exp(0.0621 * temp_june)) %>%
#mutate(sd_july = (1 - (hum_july/100)) * 4.9463 * exp(0.0621 * temp_july)) %>%
#mutate(sd_august = (1 - (hum_august/100)) * 4.9463 * exp(0.0621 * temp_august)) %>%
#mutate(sd_september = (1 - (hum_september/100)) * 4.9463 * exp(0.0621 * temp_september)) %>%
#mutate(sd_october = (1 - (hum_october/100)) * 4.9463 * exp(0.0621 * temp_october)) %>%
#mutate(sd_november = (1 - (hum_november/100)) * 4.9463 * exp(0.0621 * temp_november)) %>%
#mutate(sd_december = (1 - (hum_december/100)) * 4.9463 * exp(0.0621 * temp_december))
mutate(sd_spring_present = (1 - (hum_spring_present/100)) * 4.9463 * exp(0.0621 * temp_spring_present)) %>%
mutate(sd_summer_present = (1 - (hum_summer_present/100)) * 4.9463 * exp(0.0621 * temp_summer_present)) %>%
mutate(sd_autumn_present = (1 - (hum_autumn_present/100)) * 4.9463 * exp(0.0621 * temp_autumn_present)) %>%
mutate(sd_winter_present = (1 - (hum_winter_present/100)) * 4.9463 * exp(0.0621 * temp_winter_present))
target_fishnet_measurements <- target_fishnet_measurements %>%
mutate(temp_january = temp_july - (temp_Jul - temp_Jan)) %>%
mutate(temp_february = temp_july - (temp_Jul - temp_Feb)) %>%
mutate(temp_march = temp_july - (temp_Jul - temp_Mar)) %>%
mutate(temp_april = temp_july - (temp_Jul - temp_Apr)) %>%
mutate(temp_may = temp_july - (temp_Jul - temp_May)) %>%
mutate(temp_june = temp_july - (temp_Jul - temp_Jun)) %>%
mutate(temp_august = temp_july - (temp_Jul - temp_Aug)) %>%
mutate(temp_september = temp_july - (temp_Jul - temp_Sep)) %>%
mutate(temp_october = temp_july - (temp_Jul - temp_Oct)) %>%
mutate(temp_november = temp_july - (temp_Jul - temp_Nov)) %>%
mutate(temp_december = temp_july - (temp_Jul - temp_Dec)) %>%
mutate(hum_january = hum_july - (hum_Jul - hum_Jan)) %>%
mutate(hum_february = hum_july - (hum_Jul - hum_Feb)) %>%
mutate(hum_march = hum_july - (hum_Jul - hum_Mar)) %>%
mutate(hum_april = hum_july - (hum_Jul - hum_Apr)) %>%
mutate(hum_may = hum_july - (hum_Jul - hum_May)) %>%
mutate(hum_june = hum_july - (hum_Jul - hum_Jun)) %>%
mutate(hum_august = hum_july - (hum_Jul - hum_Aug)) %>%
mutate(hum_september = hum_july - (hum_Jul - hum_Sep)) %>%
mutate(hum_october = hum_july - (hum_Jul - hum_Oct)) %>%
mutate(hum_november = hum_july - (hum_Jul - hum_Nov)) %>%
mutate(hum_december = hum_july - (hum_Jul - hum_Dec)) %>%
# aggregating to seasons through mean
mutate(temp_winter_present = rowMeans(select(., temp_december, temp_january, temp_february))) %>%
mutate(temp_spring_present = rowMeans(select(., temp_march, temp_april, temp_may))) %>%
mutate(temp_summer_present = rowMeans(select(., temp_june, temp_july, temp_august))) %>%
mutate(temp_autumn_present = rowMeans(select(., temp_september, temp_october, temp_november))) %>%
mutate(hum_winter_present = rowMeans(select(., hum_december, hum_january, hum_february))) %>%
mutate(hum_spring_present = rowMeans(select(., hum_march, hum_april, hum_may))) %>%
mutate(hum_summer_present = rowMeans(select(., hum_june, hum_july, hum_august))) %>%
mutate(hum_autumn_present = rowMeans(select(., hum_september, hum_october, hum_november))) %>%
#temp_january, temp_february, temp_march, temp_april, temp_may, temp_june, temp_july, temp_august, temp_september, temp_october, temp_november, temp_december,
#hum_january, hum_february, hum_march, hum_april, hum_may, hum_june, hum_july, hum_august, hum_september, hum_october, hum_november, hum_december)
# calculation of saturation deficit for every month according to Randolph & Storey (1999)
#mutate(sd_january = (1 - (hum_january/100)) * 4.9463 * exp(0.0621 * temp_january)) %>%
#mutate(sd_february = (1 - (hum_february/100)) * 4.9463 * exp(0.0621 * temp_february)) %>%
#mutate(sd_march = (1 - (hum_march/100)) * 4.9463 * exp(0.0621 * temp_march)) %>%
#mutate(sd_april = (1 - (hum_april/100)) * 4.9463 * exp(0.0621 * temp_april)) %>%
#mutate(sd_may = (1 - (hum_may/100)) * 4.9463 * exp(0.0621 * temp_may)) %>%
#mutate(sd_june = (1 - (hum_june/100)) * 4.9463 * exp(0.0621 * temp_june)) %>%
#mutate(sd_july = (1 - (hum_july/100)) * 4.9463 * exp(0.0621 * temp_july)) %>%
#mutate(sd_august = (1 - (hum_august/100)) * 4.9463 * exp(0.0621 * temp_august)) %>%
#mutate(sd_september = (1 - (hum_september/100)) * 4.9463 * exp(0.0621 * temp_september)) %>%
#mutate(sd_october = (1 - (hum_october/100)) * 4.9463 * exp(0.0621 * temp_october)) %>%
#mutate(sd_november = (1 - (hum_november/100)) * 4.9463 * exp(0.0621 * temp_november)) %>%
#mutate(sd_december = (1 - (hum_december/100)) * 4.9463 * exp(0.0621 * temp_december))
mutate(sd_spring_present = (1 - (hum_spring_present/100)) * 4.9463 * exp(0.0621 * temp_spring_present)) %>%
mutate(sd_summer_present = (1 - (hum_summer_present/100)) * 4.9463 * exp(0.0621 * temp_summer_present)) %>%
mutate(sd_autumn_present = (1 - (hum_autumn_present/100)) * 4.9463 * exp(0.0621 * temp_autumn_present)) %>%
mutate(sd_winter_present = (1 - (hum_winter_present/100)) * 4.9463 * exp(0.0621 * temp_winter_present))
target_fishnet_measurements <- target_fishnet_measurements %>%
mutate(temp_january = temp_july - (temp_Jul - temp_Jan)) %>%
mutate(temp_february = temp_july - (temp_Jul - temp_Feb)) %>%
mutate(temp_march = temp_july - (temp_Jul - temp_Mar)) %>%
mutate(temp_april = temp_july - (temp_Jul - temp_Apr)) %>%
mutate(temp_may = temp_july - (temp_Jul - temp_May)) %>%
mutate(temp_june = temp_july - (temp_Jul - temp_Jun)) %>%
mutate(temp_august = temp_july - (temp_Jul - temp_Aug)) %>%
mutate(temp_september = temp_july - (temp_Jul - temp_Sep)) %>%
mutate(temp_october = temp_july - (temp_Jul - temp_Oct)) %>%
mutate(temp_november = temp_july - (temp_Jul - temp_Nov)) %>%
mutate(temp_december = temp_july - (temp_Jul - temp_Dec)) %>%
mutate(hum_january = hum_july - (hum_Jul - hum_Jan)) %>%
mutate(hum_february = hum_july - (hum_Jul - hum_Feb)) %>%
mutate(hum_march = hum_july - (hum_Jul - hum_Mar)) %>%
mutate(hum_april = hum_july - (hum_Jul - hum_Apr)) %>%
mutate(hum_may = hum_july - (hum_Jul - hum_May)) %>%
mutate(hum_june = hum_july - (hum_Jul - hum_Jun)) %>%
mutate(hum_august = hum_july - (hum_Jul - hum_Aug)) %>%
mutate(hum_september = hum_july - (hum_Jul - hum_Sep)) %>%
mutate(hum_october = hum_july - (hum_Jul - hum_Oct)) %>%
mutate(hum_november = hum_july - (hum_Jul - hum_Nov)) %>%
mutate(hum_december = hum_july - (hum_Jul - hum_Dec)) %>%
# aggregating to seasons through mean
mutate(temp_winter_present = rowMeans(dplyr::select(., temp_december, temp_january, temp_february))) %>%
mutate(temp_spring_present = rowMeans(dplyr::select(., temp_march, temp_april, temp_may))) %>%
mutate(temp_summer_present = rowMeans(dplyr::select(., temp_june, temp_july, temp_august))) %>%
mutate(temp_autumn_present = rowMeans(dplyr::select(., temp_september, temp_october, temp_november))) %>%
mutate(hum_winter_present = rowMeans(dplyr::select(., hum_december, hum_january, hum_february))) %>%
mutate(hum_spring_present = rowMeans(dplyr::select(., hum_march, hum_april, hum_may))) %>%
mutate(hum_summer_present = rowMeans(dplyr::select(., hum_june, hum_july, hum_august))) %>%
mutate(hum_autumn_present = rowMeans(dplyr::select(., hum_september, hum_october, hum_november))) %>%
#temp_january, temp_february, temp_march, temp_april, temp_may, temp_june, temp_july, temp_august, temp_september, temp_october, temp_november, temp_december,
#hum_january, hum_february, hum_march, hum_april, hum_may, hum_june, hum_july, hum_august, hum_september, hum_october, hum_november, hum_december)
# calculation of saturation deficit for every month according to Randolph & Storey (1999)
#mutate(sd_january = (1 - (hum_january/100)) * 4.9463 * exp(0.0621 * temp_january)) %>%
#mutate(sd_february = (1 - (hum_february/100)) * 4.9463 * exp(0.0621 * temp_february)) %>%
#mutate(sd_march = (1 - (hum_march/100)) * 4.9463 * exp(0.0621 * temp_march)) %>%
#mutate(sd_april = (1 - (hum_april/100)) * 4.9463 * exp(0.0621 * temp_april)) %>%
#mutate(sd_may = (1 - (hum_may/100)) * 4.9463 * exp(0.0621 * temp_may)) %>%
#mutate(sd_june = (1 - (hum_june/100)) * 4.9463 * exp(0.0621 * temp_june)) %>%
#mutate(sd_july = (1 - (hum_july/100)) * 4.9463 * exp(0.0621 * temp_july)) %>%
#mutate(sd_august = (1 - (hum_august/100)) * 4.9463 * exp(0.0621 * temp_august)) %>%
#mutate(sd_september = (1 - (hum_september/100)) * 4.9463 * exp(0.0621 * temp_september)) %>%
#mutate(sd_october = (1 - (hum_october/100)) * 4.9463 * exp(0.0621 * temp_october)) %>%
#mutate(sd_november = (1 - (hum_november/100)) * 4.9463 * exp(0.0621 * temp_november)) %>%
#mutate(sd_december = (1 - (hum_december/100)) * 4.9463 * exp(0.0621 * temp_december))
mutate(sd_spring_present = (1 - (hum_spring_present/100)) * 4.9463 * exp(0.0621 * temp_spring_present)) %>%
mutate(sd_summer_present = (1 - (hum_summer_present/100)) * 4.9463 * exp(0.0621 * temp_summer_present)) %>%
mutate(sd_autumn_present = (1 - (hum_autumn_present/100)) * 4.9463 * exp(0.0621 * temp_autumn_present)) %>%
mutate(sd_winter_present = (1 - (hum_winter_present/100)) * 4.9463 * exp(0.0621 * temp_winter_present))
# rejoining to the geometry
target_fishnet <- target_fishnet %>%
select(id, geometry) %>%
left_join(target_fishnet_measurements %>%
dplyr::select(id,
hum_winter_present, hum_spring_present, hum_summer_present, hum_autumn_present,
temp_winter_present, temp_spring_present, temp_summer_present, temp_autumn_present,
sd_winter_present, sd_spring_present, sd_summer_present, sd_autumn_present),
by="id")
